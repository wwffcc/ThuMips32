process(rst,clk,COM_Write,COM_Read)
	begin
		if rst = '0' then
			rdn<='1';
			wrn<='1';
			Ram1Data<=(others=>'Z');
			COM_Ready<='0';
			Status_out<=(others=>'1');					--can read,and can write
			Data_out<=(others=>'0');
			--COM_INT<='0';									--no com interrupt
			fr_state<=com_init;
		elsif COM_Write = '0' and COM_Read = '0' then
			rdn<='1';
			wrn<='1';
			Ram1Data<=(others=>'Z');
			COM_Ready<='0';
			--Status_out<=(others=>'1');					--can read,and can write
			Data_out<=(others=>'0');
			--COM_INT<='0';									--no com interrupt
			fr_state<=com_init;
		elsif rising_edge(clk) then
			case fr_state is
				when com_init=>
					wrn<='1';
					rdn<='1';
					Ram1Data<=(others=>'Z');
					COM_ready<='0';					
					if COM_Write = '1' then
						fr_state<=send0;	
						Status_out(1)<='0';						--TESTR
					elsif data_ready = '1' then
						Ram1Data<=(others=>'Z');	
						Status_out(0)<='0';						--TESTW
						fr_state<=recv0;
					end if;
				when recv0=>					
					rdn<='0';
					fr_state<=recv1;
				when recv1=>
					rdn<='1';
					Data_out(7 downto 0)<=Ram1Data(7 downto 0);
					Data_out(31 downto 8)<=(others=>'0');
					COM_Ready<='1';
					Status_out(0)<='1';							--TESTW
					fr_state<=com_init;
				when send0=>
					if tbre='1' then
						fr_state<=send1;
					end if;
				when send1=>
					if tsre='1' then
						Ram1Data<=Data_in;
						fr_state<=send2;
					end if;
				when send2=>
					wrn<='0';
					fr_state<=send3;
				when send3=>
					wrn<='1';
					Ram1Data<=(others=>'Z');
					COM_Ready<='1';
					Status_out(1)<='1';						--TESTR
					fr_state<=com_init;
				when others=>
					NULL;
			end case;
		end if;
	end process;
	
	process(rst,clk)
	begin
		if rst = '0' then
			--Status_out<=(others=>'1');
			COM_INT<='0';
		elsif rising_edge(clk) then
			if data_ready = '1' then
				--Status_out(0)<='0';					--PC cannot write data
				COM_INT<='1';
			else
				--Status_out(0)<='1';
				COM_INT<='0';
			end if;
		end if;
	end process;
end Behavioral;